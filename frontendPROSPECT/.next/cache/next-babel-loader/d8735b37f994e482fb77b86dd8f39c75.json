{"ast":null,"code":"var _jsxFileName = \"/Users/ryanmacdiarmid/Dropbox (Personal)/_github/prospectable/frontendPROSPECT/components/DeleteItem.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { ALL_ITEMS_QUERY } from './Items';\nconst DELETE_ITEM_MUTATION = gql`\n    mutation DELETE_ITEM_MUTATION($id: ID!) {\n        deleteItem(id: $id) {\n            id\n        }\n    }\n`;\n\nclass DeleteItem extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"update\", (cache, payload) => {\n      //manually update the cache on the client, so it matches the server\n      // 1. Read the cache for the items we want\n      const data = cache.readQuery({\n        query: ALL_ITEMS_QUERY\n      });\n      console.log(data, payload); // 2. Filter the deleted itemout of the page\n\n      data.items = data.items.filter(item => item.id !== payload.data.deleteItem.id); // 3. Put the items back!\n\n      cache.writeQuery({\n        query: ALL_ITEMS_QUERY,\n        data\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Mutation, {\n      mutation: DELETE_ITEM_MUTATION,\n      variables: {\n        id: this.props.id\n      },\n      update: this.update,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, (deleteItem, {\n      error\n    }) => __jsx(\"button\", {\n      onClick: () => {\n        if (confirm('Are you sure you want to delete it BRO!')) {\n          deleteItem();\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }, this.props.children));\n  }\n\n}\n\nexport default DeleteItem;","map":{"version":3,"sources":["/Users/ryanmacdiarmid/Dropbox (Personal)/_github/prospectable/frontendPROSPECT/components/DeleteItem.js"],"names":["React","Component","Mutation","gql","ALL_ITEMS_QUERY","DELETE_ITEM_MUTATION","DeleteItem","cache","payload","data","readQuery","query","console","log","items","filter","item","id","deleteItem","writeQuery","render","props","update","error","confirm","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,eAAT,QAAgC,SAAhC;AAEA,MAAMC,oBAAoB,GAAGF,GAAI;;;;;;CAAjC;;AAQA,MAAMG,UAAN,SAAyBL,SAAzB,CAAmC;AAAA;AAAA;;AAAA,oCACtB,CAACM,KAAD,EAAQC,OAAR,KAAoB;AACzB;AACA;AACA,YAAMC,IAAI,GAAGF,KAAK,CAACG,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEP;AAAT,OAAhB,CAAb;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkBD,OAAlB,EAJyB,CAKzB;;AACAC,MAAAA,IAAI,CAACK,KAAL,GAAaL,IAAI,CAACK,KAAL,CAAWC,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYT,OAAO,CAACC,IAAR,CAAaS,UAAb,CAAwBD,EAA9D,CAAb,CANyB,CAOzB;;AACAV,MAAAA,KAAK,CAACY,UAAN,CAAiB;AAAER,QAAAA,KAAK,EAAEP,eAAT;AAA0BK,QAAAA;AAA1B,OAAjB;AACH,KAV8B;AAAA;;AAW/BW,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,QAAD;AACE,MAAA,QAAQ,EAAEf,oBADZ;AAEE,MAAA,SAAS,EAAE;AAAEY,QAAAA,EAAE,EAAE,KAAKI,KAAL,CAAWJ;AAAjB,OAFb;AAGE,MAAA,MAAM,EAAE,KAAKK,MAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKK,CAACJ,UAAD,EAAa;AAAEK,MAAAA;AAAF,KAAb,KACD;AAAQ,MAAA,OAAO,EAAE,MAAM;AACnB,YAAGC,OAAO,CAAC,yCAAD,CAAV,EAAuD;AACnDN,UAAAA,UAAU;AACb;AACJ,OAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII,KAAKG,KAAL,CAAWI,QAJf,CANJ,CADJ;AAeH;;AA3B8B;;AA8BnC,eAAenB,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { ALL_ITEMS_QUERY } from './Items';\n\nconst DELETE_ITEM_MUTATION = gql`\n    mutation DELETE_ITEM_MUTATION($id: ID!) {\n        deleteItem(id: $id) {\n            id\n        }\n    }\n`;\n\nclass DeleteItem extends Component {\n    update = (cache, payload) => {\n        //manually update the cache on the client, so it matches the server\n        // 1. Read the cache for the items we want\n        const data = cache.readQuery({ query: ALL_ITEMS_QUERY });\n        console.log(data, payload);\n        // 2. Filter the deleted itemout of the page\n        data.items = data.items.filter(item => item.id !== payload.data.deleteItem.id);\n        // 3. Put the items back!\n        cache.writeQuery({ query: ALL_ITEMS_QUERY, data })\n    };\n    render() {\n        return (\n            <Mutation \n              mutation={DELETE_ITEM_MUTATION} \n              variables={{ id: this.props.id }}\n              update={this.update}\n            >\n                {(deleteItem, { error }) => (\n                <button onClick={() => {\n                    if(confirm('Are you sure you want to delete it BRO!')) {\n                        deleteItem();\n                    }\n                }}>{this.props.children}</button>\n                )}\n            </Mutation>\n        );\n    }\n}\n\nexport default DeleteItem;"]},"metadata":{},"sourceType":"module"}