{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/ryanmacdiarmid/Dropbox (Personal)/_github/prospectable/frontendprospect/components/ResetPage.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation RESET_MUTATION($resetToken: String!, $password: String!, $confirmPassword: String!) {\\n        resetPassword(resetToken: $resetToken,\\n        password: $password,\\n        confirmPassword: $confirmPassword) {\\n            id\\n            email\\n            name\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nimport PropTypes from 'prop-types';\nimport { CURRENT_USER_QUERY } from './User';\nvar RESET_MUTATION = gql(_templateObject());\n\nvar ResetPage = /*#__PURE__*/function (_Component) {\n  _inherits(ResetPage, _Component);\n\n  var _super = _createSuper(ResetPage);\n\n  function ResetPage() {\n    var _this;\n\n    _classCallCheck(this, ResetPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      password: '',\n      confirmPassword: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveToState\", function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    });\n\n    return _this;\n  }\n\n  _createClass(ResetPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Mutation, {\n        mutation: RESET_MUTATION,\n        variables: {\n          resetToken: this.props.resetToken,\n          password: this.state.password,\n          confirmPassword: this.state.confirmPassword\n        },\n        refetchQueries: [{\n          query: CURRENT_USER_QUERY\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, function (reset, _ref) {\n        var error = _ref.error,\n            loading = _ref.loading,\n            called = _ref.called;\n        return __jsx(Form, {\n          method: \"post\",\n          onSubmit: /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      e.preventDefault();\n                      _context.next = 3;\n                      return reset();\n\n                    case 3:\n                      _this2.setState({\n                        email: ''\n                      });\n\n                    case 4:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            return function (_x) {\n              return _ref2.apply(this, arguments);\n            };\n          }(),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }\n        }, __jsx(\"fieldset\", {\n          disabled: loading,\n          \"aria-busy\": loading,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }\n        }, __jsx(\"h2\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }\n        }, \"Reset Your Password\"), __jsx(Error, {\n          error: error,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }\n        }), __jsx(\"label\", {\n          htmlFor: \"password\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }\n        }, \"Password\", __jsx(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          placeholder: \"password\",\n          value: _this2.state.password,\n          onChange: _this2.saveToState,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 18\n          }\n        })), __jsx(\"label\", {\n          htmlFor: \"confirmPassword\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }\n        }, \"Confirm Your Password\", __jsx(\"input\", {\n          type: \"password\",\n          name: \"confirmPassword\",\n          placeholder: \"confirm password\",\n          value: _this2.state.confirmPassword,\n          onChange: _this2.saveToState,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 18\n          }\n        })), __jsx(\"button\", {\n          type: \"submit\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }\n        }, \"Reset Your Password!\")));\n      });\n    }\n  }]);\n\n  return ResetPage;\n}(Component);\n\n_defineProperty(ResetPage, \"propTypes\", {\n  resetToken: PropTypes.string.isRequired\n});\n\nexport default ResetPage;","map":{"version":3,"sources":["/Users/ryanmacdiarmid/Dropbox (Personal)/_github/prospectable/frontendprospect/components/ResetPage.js"],"names":["React","Component","Mutation","gql","Form","Error","PropTypes","CURRENT_USER_QUERY","RESET_MUTATION","ResetPage","password","confirmPassword","e","setState","target","name","value","resetToken","props","state","query","reset","error","loading","called","preventDefault","email","saveToState","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport Form from './styles/Form';\nimport Error from './ErrorMessage';\nimport PropTypes from 'prop-types';\nimport { CURRENT_USER_QUERY } from './User';\n\n\nconst RESET_MUTATION = gql`\n    mutation RESET_MUTATION($resetToken: String!, $password: String!, $confirmPassword: String!) {\n        resetPassword(resetToken: $resetToken,\n        password: $password,\n        confirmPassword: $confirmPassword) {\n            id\n            email\n            name\n        }\n    }\n`;\n\nclass ResetPage extends Component {\n    static propTypes = {\n        resetToken: PropTypes.string.isRequired,\n    };\n    state = {\n        password: '',\n        confirmPassword: ''\n    };\n    saveToState = e => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n    render() {\n        return (\n        <Mutation \n            mutation={RESET_MUTATION} \n            variables={{\n                resetToken: this.props.resetToken,\n                password: this.state.password,\n                confirmPassword: this.state.confirmPassword\n        }}\n            refetchQueries={[{\n                query: CURRENT_USER_QUERY\n            }]}\n        >\n            {(reset, { error, loading, called }) => (\n            <Form \n                method=\"post\" \n                onSubmit={async (e) => {\n                    e.preventDefault();\n                    await reset();\n                    this.setState({ email: '' });\n                }}\n            >\n            <fieldset disabled={loading} aria-busy={loading}>\n                <h2>Reset Your Password</h2>\n                <Error error={error} />\n                <label htmlFor=\"password\">\n                 Password\n                 <input \n                    type=\"password\" \n                    name=\"password\" \n                    placeholder=\"password\" \n                    value={this.state.password} \n                    onChange={this.saveToState}\n                    />\n                </label>\n                <label htmlFor=\"confirmPassword\">\n                 Confirm Your Password\n                 <input \n                    type=\"password\" \n                    name=\"confirmPassword\" \n                    placeholder=\"confirm password\" \n                    value={this.state.confirmPassword} \n                    onChange={this.saveToState}\n                    />\n                </label>\n            <button type=\"submit\">Reset Your Password!</button>\n        </fieldset>\n        </Form>)\n            }\n        </Mutation>\n        );\n    };\n}\n\nexport default ResetPage;"]},"metadata":{},"sourceType":"module"}